<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Name</title>
    <link rel="stylesheet" href="/main.css">
</head>
<body>
    <!-- Sidebar -->
    <%- include('partials/sidebar', { username: user.username, userid: user.userid }) %> 

    <!-- Main Content -->
    <div class="content-container">
        <!-- Radio Buttons -->
        <div class="filter-container">
            <label><input type="radio" name="editFilter" value="store" checked> Store</label>
            <label><input type="radio" name="editFilter" value="category"> Category</label>
            <label><input type="radio" name="editFilter" value="item"> Item</label>
        </div>
        <div class="form-container">
            <div  id="storeTableContainer" >
                <table id="storeTable" class="custom-table">
                    <thead>
                        <tr>
                            <th>No.</th>
                            <th>Store Name</th>
                            <th>Edit Store Name</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Rows dynamically added here -->
                    </tbody>
                </table>
            </div>
    
            <!-- Store Dropdown for Category -->
            <div class="form-row4" id="storeSelectContainer" style="display: none;">
                <div>
                    <label for="storeSelect">Select Store:</label>
                    <select id="storeSelect">
                        <option value="">Select Store</option>
                    </select>
                </div>
                
            </div>
            <div class="breakLine1">
                <hr>
            </div>
            <!-- Category Table -->
            <div  id="categoryTableContainer" style="display: none;">
                <table id="categoryTable" class="custom-table">
                    <thead>
                        <tr>
                            <th>No.</th>
                            <th>Category Name</th>
                            <th>Edit Category Name</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Rows dynamically added here -->
                    </tbody>
                </table>
                
            </div>
    
            <!-- Store and Category Dropdowns for Item -->
            
            <div class="form-row3" id="itemSelectContainer" style="display: none;">
                <div class="form-item">
                    <div>
                        <label for="itemStoreSelect">Select Store:</label>
                        <select id="itemStoreSelect">
                            <option value="">Select Store</option>
                        </select>
                    </div>
                </div>
                <div class="form-item">
                    <div>
                        <label for="itemCategorySelect">Select Category:</label>
                        <select id="itemCategorySelect" disabled>
                            <option value="">Select Category</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="breakLine2">
                <hr>
            </div>
    
            <!-- Item Table -->
            <div  id="itemTableContainer" style="display: none;">
                <table id="itemTable" class="custom-table">
                    <thead>
                        <tr>
                            <th>No.</th>
                            <th>Item Name</th>
                            <th>Edit Item Name</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Rows dynamically added here -->
                    </tbody>
                </table>
            </div>
        </div>
        <!-- Store Table -->
        
    </div>

    <script>
        function toggleBreakLine(show) {
            const breakLines = document.querySelectorAll('.breakLine1');
            breakLines.forEach(breakLine => {
                breakLine.style.display = show ? 'block' : 'none';
            });
        }
        function toggleBreakLine1(show) {
            const breakLines = document.querySelectorAll('.breakLine2');
            breakLines.forEach(breakLine => {
                breakLine.style.display = show ? 'block' : 'none';
            });
        }
        // Fetch Store Data
        async function fetchStores() {
            try {
                const response = await fetch('/editName/getStores');
                const stores = await response.json();

                const tbody = document.querySelector('#storeTable tbody');
                tbody.innerHTML = '';

                stores.forEach((store, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${store.storename}</td>
                        <td>
                            <input type="text" class="edit-input" value="${store.storename}">
                        </td>
                        <td>
                            <button class="btn btn-edit" onclick="updateStore(${store.storeid}, this)">Edit Name</button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error('Error fetching stores:', error);
                alert('Failed to fetch stores.');
            }
        }

        // Update Store Name
        async function updateStore(storeId, button) {
            const row = button.parentElement.parentElement;
            const newStoreName = row.querySelector('.edit-input').value.trim();

            if (!newStoreName) {
                alert('Store name cannot be empty.');
                return;
            }

            try {
                const response = await fetch('/editName/updateStore', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ storeId, newStoreName }),
                });

                if (response.ok) {
                    alert('Store name updated successfully.');
                    fetchStores();
                } else {
                    const errorText = await response.text();
                    alert(`Failed to update store: ${errorText}`);
                }
            } catch (error) {
                console.error('Error updating store:', error);
                alert('An error occurred while updating the store.');
            }
        }
        // Fetch Stores for Category and Item dropdowns
        async function fetchStoresForDropdown(dropdownId) {
            try {
                const response = await fetch('/editName/getStores', {
                    method: 'GET',
                });
                const stores = await response.json();
                const dropdown = document.getElementById(dropdownId);

                // Populate Store Dropdown
                dropdown.innerHTML = '<option value="">Select Store</option>';
                stores.forEach(store => {
                    const option = document.createElement('option');
                    option.value = store.storeid;
                    option.textContent = store.storename;
                    dropdown.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching stores:', error);
            }
        }

        // Fetch Categories based on Store selection
        async function fetchCategories(storeId) {
            try {
                const response = await fetch(`/editName/getCategories/${storeId}`);
                const categories = await response.json();
                const tbody = document.querySelector('#categoryTable tbody');

                // Clear existing table data
                tbody.innerHTML = '';

                if (categories.length === 0) {
                    document.getElementById('categoryTableContainer').style.display = 'none';
                    return;
                }

                // Populate table with categories
                categories.forEach((category, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${category.categoryname}</td>
                        <td>
                            <input type="text" class="edit-input" value="${category.categoryname}">
                        </td>
                        <td>
                            <button class="btn btn-add" onclick="updateCategory(${category.categoryid}, this)">Edit Name</button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });

                document.getElementById('categoryTableContainer').style.display = 'block'; // Show the table
            } catch (error) {
                console.error('Error fetching categories:', error);
            }
        }

        async function updateCategory(categoryId, button) {
            const row = button.parentElement.parentElement;
            const newCategoryName = row.querySelector('.edit-input').value.trim();

            if (!newCategoryName) {
                alert('Category name cannot be empty.');
                return;
            }

            try {
                const response = await fetch('/editName/updateCategory', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ categoryId, newCategoryName }),
                });

                if (response.ok) {
                    alert('Category name updated successfully.');
                    fetchCategories(document.getElementById('storeSelect').value); // Refresh table
                } else {
                    const errorText = await response.text();
                    alert(`Failed to update category: ${errorText}`);
                }
            } catch (error) {
                console.error('Error updating category:', error);
                alert('An error occurred while updating the category.');
            }
        }
        
        async function fetchCategoriesForItem(storeId) {
        try {
            const response = await fetch(`/editName/getCategories/${storeId}`);
            const categories = await response.json();
            const categoryDropdown = document.getElementById('itemCategorySelect');

            categoryDropdown.innerHTML = '<option value="">Select Category</option>';
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.categoryid;
                option.textContent = category.categoryname;
                categoryDropdown.appendChild(option);
            });

            categoryDropdown.disabled = false; // Enable category dropdown
        } catch (error) {
            console.error('Error fetching categories for items:', error);
        }
    }


        // Fetch Items based on Category selection
        async function fetchItems(categoryId) {
            try {
                const response = await fetch(`/editName/getItems/${categoryId}`);
                const items = await response.json();
                const tbody = document.querySelector('#itemTable tbody');

                // Clear existing table data
                tbody.innerHTML = '';

                if (items.length === 0) {
                    document.getElementById('itemTableContainer').style.display = 'none';
                    return;
                }

                // Populate table with items
                items.forEach((item, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${item.itemname}</td>
                        <td>
                            <input type="text" class="edit-input" value="${item.itemname}">
                        </td>
                        <td>
                            <button class="btn btn-edit" onclick="updateItem(${item.itemid}, this)">Edit Name</button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });

                document.getElementById('itemTableContainer').style.display = 'block'; // Show the table
            } catch (error) {
                console.error('Error fetching items:', error);
            }
        }
        async function updateItem(itemId, button) {
            const row = button.parentElement.parentElement;
            const newItemName = row.querySelector('.edit-input').value.trim();

            if (!newItemName) {
                alert('Item name cannot be empty.');
                return;
            }

            try {
                const response = await fetch('/editName/updateItem', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ itemId, newItemName }),
                });

                if (response.ok) {
                    alert('Item name updated successfully.');
                    fetchItems(document.getElementById('itemCategorySelect').value); // Refresh table
                } else {
                    const errorText = await response.text();
                    alert(`Failed to update item: ${errorText}`);
                }
            } catch (error) {
                console.error('Error updating item:', error);
                alert('An error occurred while updating the item.');
            }
        }



        // Event Listener for Radio Buttons
        // Radio Button Event Listeners
        document.querySelectorAll('input[name="editFilter"]').forEach(radio => {
            radio.addEventListener('change', function() {
                // Hide all sections
                document.getElementById('storeTableContainer').style.display = 'none';
                document.getElementById('storeSelectContainer').style.display = 'none';
                document.getElementById('itemSelectContainer').style.display = 'none';
                document.getElementById('categoryTableContainer').style.display = 'none';
                document.getElementById('itemTableContainer').style.display = 'none';
                toggleBreakLine(false);
                toggleBreakLine1(false);
                // Show relevant section based on selected radio button
                if (this.value === 'store') {
                    document.getElementById('storeTableContainer').style.display = 'block';
                    fetchStores();
                } else if (this.value === 'category') {
                    document.getElementById('storeSelectContainer').style.display = 'flex';
                    fetchStoresForDropdown('storeSelect');
                } else if (this.value === 'item') {
                    document.getElementById('itemSelectContainer').style.display = 'flex';
                    fetchStoresForDropdown('itemStoreSelect'); // Fetch stores for item selection
                }
            });
        });


    // Store Selection for Category
    document.getElementById('storeSelect').addEventListener('change', function() {
        const storeId = this.value;
        if (storeId) {
            fetchCategories(storeId);
            document.getElementById('categoryTableContainer').style.display = 'block';
            toggleBreakLine(true);
            toggleBreakLine1(false);
        } else {
            document.getElementById('categoryTableContainer').style.display = 'none';
            toggleBreakLine(false);
            toggleBreakLine1(false);
        }
    });

    // Store Selection for Item
    document.getElementById('itemStoreSelect').addEventListener('change', function() {
        const storeId = this.value;
        if (storeId) {
            fetchCategoriesForItem(storeId); // Fetch categories for selected store
            document.getElementById('itemCategorySelect').disabled = false;
        } else {
            document.getElementById('itemCategorySelect').disabled = true;
            document.getElementById('itemTableContainer').style.display = 'none';
        }
    });



    // Category Selection for Item
    document.getElementById('itemCategorySelect').addEventListener('change', function() {
        const categoryId = this.value;
        if (categoryId) {
            fetchItems(categoryId);
            document.getElementById('itemTableContainer').style.display = 'block';
            toggleBreakLine1(true);
            toggleBreakLine(false);
        } else {
            document.getElementById('itemTableContainer').style.display = 'none';
            toggleBreakLine(false);
            toggleBreakLine1(false);
        }
    });





        // Fetch stores on page load
        window.onload = fetchStores;
    </script>
</body>
</html>
