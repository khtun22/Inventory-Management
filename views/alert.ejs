<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Alert</title>
    <link rel="stylesheet" href="/main.css">
</head>
<body>

    </head> 
    <!-- Sidebar -->
    <%- include('partials/sidebar', { username: user.username, userid: user.userid }) %> 
    <!-- Main Content -->
    <div class="content-container">
        <!-- Buttons Below Top Bar -->
        
        <!-- Input Form -->
        <div class="form-container">
            
            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    var today = new Date();
                    var dateString = today.toLocaleDateString();
                    document.getElementById('todayDate').textContent = dateString;
                });
            </script>
            <div class="form-row1">
                <div class="form-item">
                    <label for="store">Store</label>
                    <div>
                        <select id="store" name="store">
                            <option value="">Select Store</option>
                            <% stores.forEach(store => { %>
                                <option value="<%= store.storeid %>"><%= store.storename %></option>
                            <% }) %>
                        </select>
                        <button class="btn btn-store" onclick="location.href='/addstore'">New Store</button>
                    </div>
                </div>
                <div class="form-item">
                    <label for="category">Category</label>
                    <div>
                        <select id="category" name="category">
                            <option value="">Select Category</option>
                        </select>
                        <button class="btn btn-location" onclick="location.href='/addcategory'">New Category</button>
                    </div>
                </div>
                
            </div>
            <script>
                document.getElementById('store').addEventListener('change', async function () {
                    const storeId = this.value; // Get selected store ID
                    const categoryDropdown = document.getElementById('category');
                    
                    // Clear existing options
                    categoryDropdown.innerHTML = '<option value="">Select Category</option>';
            
                    if (storeId) {
                        try {
                            // Fetch categorys from the server
                            const response = await fetch(`/categorys/${storeId}`);
                            const categorys = await response.json();
            
                            // Populate category dropdown
                            categorys.forEach(category => {
                                const option = document.createElement('option');
                                option.value = category.categoryid;
                                option.textContent = category.categoryname;
                                categoryDropdown.appendChild(option);
                            });
                        } catch (error) {
                            console.error('Error fetching categorys:', error);
                        }
                    }
                });
            </script>
            
            <div class="breakLine">
                <hr>
            </div>
            <table id="itemTable" class="alert-table">
                <thead>
                    <tr>
                        <th>No.</th>
                        <th>Item Name</th>
                        <th>Item Qty</th>
                        <th>Alert Qty</th>
                        <th>Alert Con</th>
                        <th>Exp Date</th>
                        <th>Alert Date</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows dynamically added here -->
                </tbody>
            </table>

            
        </div>
    </div>
    <script>
        document.getElementById('category').addEventListener('change', async function () {
            const categoryId = this.value; // Get the selected category ID
            const itemTableBody = document.getElementById('itemTable').getElementsByTagName('tbody')[0];
            
            // Clear existing rows in the itemTable
            itemTableBody.innerHTML = '';
    
            if (categoryId) {
                try {
                    // Fetch items from the server for the selected category
                    const response = await fetch(`/items/${categoryId}`);
                    const items = await response.json();
    
                    // Populate the itemTable with rows
                    items.forEach((item, index) => {
                        const row = document.createElement('tr');
    
                        row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${item.itemname}</td>
                        <td>${item.itemqty}</td>
                        <td>
                            <input type="number" 
                                class="alert-qty uniform-width" 
                                min="0" 
                                max="${item.itemqty}" 
                                value="${item.alertqty}"
                                data-original-value="${item.alertqty}"
                                oninput="validateAlertQty(this, ${item.itemqty})">
                        </td>
                        <td>
                            <select id="alertCondition-${index}" 
                                    name="alertCondition"  
                                    class="small-input" 
                                    data-original-value="${item.alertcon}">
                                <option value="">--</option>
                                <option value="lt" ${item.alertcon === 'lt' ? 'selected' : ''}>Less Than</option>
                                <option value="lte" ${item.alertcon === 'lte' ? 'selected' : ''}>Less Than or Equal</option>
                                <option value="gt" ${item.alertcon === 'gt' ? 'selected' : ''}>Greater Than</option>
                                <option value="gte" ${item.alertcon === 'gte' ? 'selected' : ''}>Greater Than or Equal</option>
                            </select>
                        </td>
                        <td>
                            <input type="date" 
                                id="expireDate-${index}" 
                                name="expireDate" 
                                class="uniform-width" 
                                value="${item.expdate ? item.expdate : ''}"
                                data-original-value="${item.expdate ? item.expdate : ''}"
                                onchange="toggleAlertDate(${index})">
                        </td>
                        <td>
                            <input type="number" 
                                id="alertDate-${index}" 
                                class="alert-qty uniform-width" 
                                name="alertDate" 
                                value="${item.alertdate}"
                                min="0" 
                                max="1000" 
                                data-original-value="${item.alertdate}"
                                ${item.expdate ? '' : 'disabled'}
                                oninput="validateAlertDate(this)">
                        </td>
                        <td>
                            <input type="hidden" name="itemid" value="${item.itemid}">
                            <button class="btn1 btn1-add">Save</button>
                            <button class="btn1 btn1-cancel" onclick="resetRow(${index})">Cancel</button>
                        </td>
                    `;


                        itemTableBody.appendChild(row);
                    });
                } catch (error) {
                    console.error('Error fetching items:', error);
                    alert('Failed to fetch items for the selected category.');
                }
            }
        });
        function checkAlertQty(input, maxQty) {
            if (parseInt(input.value) > maxQty) {
                input.value = maxQty;
            }
        }
        function validateAlertQty(input, maxQty) {
            let value = parseInt(input.value, 10);

            if (isNaN(value) || value < 0) {
                input.value = 0;
            } else if (value > maxQty) {
                input.value = maxQty;
            }
        }

        // Validate alertDate (max is 1000)
        function validateAlertDate(input) {
            let value = parseInt(input.value, 10);

            if (isNaN(value) || value < 0) {
                input.value = 0;
            } else if (value > 1000) {
                input.value = 1000;
            }
        }
        // Enable or Disable alertDate based on expDate value
        function toggleAlertDate(index) {
            const expDateInput = document.getElementById(`expireDate-${index}`);
            const alertDateInput = document.getElementById(`alertDate-${index}`);

            // Check if expDate is cleared
            if (!expDateInput.value) {
                alertDateInput.value = ''; // Clear alertDate
                alertDateInput.disabled = true; // Disable input
            } else {
                alertDateInput.disabled = false; // Enable input
            }
        }

        function resetRow(index) {
            const row = document.querySelectorAll('#itemTable tbody tr')[index];

            // Reset alertQty
            const alertQtyInput = row.querySelector('.alert-qty');
            alertQtyInput.value = alertQtyInput.getAttribute('data-original-value');

            // Reset alertCondition
            const alertConditionSelect = row.querySelector('select[name="alertCondition"]');
            alertConditionSelect.value = alertConditionSelect.getAttribute('data-original-value');

            // Reset expireDate
            const expireDateInput = row.querySelector('input[name="expireDate"]');
            expireDateInput.value = expireDateInput.getAttribute('data-original-value');
            toggleAlertDate(index); // Enable/disable alertDate based on expireDate

            // Reset alertDate
            const alertDateInput = row.querySelector('input[name="alertDate"]');
            alertDateInput.value = alertDateInput.getAttribute('data-original-value');
        }

        // Add event listener for Save buttons
        // Event Delegation for Save Buttons
        document.getElementById('itemTable').addEventListener('click', async function (event) {
            if (event.target.classList.contains('btn1-add')) {
                const row = event.target.parentElement.parentElement;
                const itemId = row.querySelector('input[name="itemid"]').value;
                const alertQty = row.querySelector('.alert-qty').value;
                const alertCon = row.querySelector('select[name="alertCondition"]').value;
                const expDate = row.querySelector('input[name="expireDate"]').value;
                const alertDate = row.querySelector('input[name="alertDate"]').value;

                const updatedData = {
                    itemId,
                    alertQty,
                    alertCon,
                    expDate: expDate || null, // If empty, set as null
                    alertDate: alertDate || null, // If empty, set as null
                };

                try {
                    const response = await fetch('/alert/updateItem', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(updatedData),
                    });

                    if (response.ok) {
                        alert('Item updated successfully.');
                    } else {
                        const errorText = await response.text();
                        alert(`Failed to update item: ${errorText}`);
                    }
                } catch (error) {
                    console.error('Error updating item:', error);
                    alert('An error occurred while updating the item.');
                }
            }
        });


        
    </script>
</body>
</html>